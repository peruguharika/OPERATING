#include <stdio.h>
#include <pthread.h>

pthread_mutex_t mutex;
pthread_cond_t condition;
int semaphore = 4;  

void* process(void* process_id) {
    int id = *((int*)process_id);

    pthread_mutex_lock(&mutex);
    while (semaphore <= 0) {
        pthread_cond_wait(&condition, &mutex);
    }

    semaphore--;
    printf("Process P%d acquired the semaphore.\n", id);

    printf("Process P%d is in the critical section.\n", id);

    semaphore++; 
    printf("Process P%d released the semaphore.\n", id);

    
    pthread_cond_signal(&condition);
    pthread_mutex_unlock(&mutex);

    pthread_exit(NULL);
}

int main() {
    pthread_t threads[5];
    int process_ids[5] = {1, 2, 3, 4, 5};

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&condition, NULL);
    for (int i = 0; i < 4; i++) {
        pthread_create(&threads[i], NULL, process, (void*)&process_ids[i]);
    }

    printf("Process P5 wants the semaphore.\n");

    pthread_mutex_lock(&mutex);

    while (semaphore <= 0) {
        pthread_cond_wait(&condition, &mutex);
    }

    semaphore--;
    printf("Process P5 acquired the semaphore.\n");
    printf("Process P5 is in the critical section.\n");
    semaphore++;
    printf("Process P5 released the semaphore.\n");

    pthread_cond_signal(&condition);
    pthread_mutex_unlock(&mutex);

    // Join threads
    for (int i = 0; i < 4; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&condition);

    return 0;
}
